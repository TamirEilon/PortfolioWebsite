pipeline {
    agent any
    environment {
        DOCKERHUB_REPONAME = "new_website"
        IMAGE_NAME = "website"
        TEST_INSTANCE_USER = "ec2-user"
        KEY_PATH = "/Users/tamireilon/Downloads/FinalProjectKey.pem"
        AWS_REGION = "us-east-1"
        VERSION = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    }
    stages {
        stage('Get EC2 Instance Build IP') {
            steps {
                script {
                    echo "Fetching EC2 instance IP address"
                    // Run AWS CLI command to fetch the IP address of the EC2 instance
                    TEST_SERVER_IP = sh(script: "/usr/local/bin/aws ec2 describe-instances --instance-id i-087bf23af1a6e1ef5 --query 'Reservations[0].Instances[0].PublicIpAddress' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    echo "EC2 instance IP: ${BUILD_VM_IP}"
                }
            }
        }
        stage('Get EC2 Instance Test IP') {
            steps {
                script {
                    echo "Fetching EC2 instance IP address"
                    // Run AWS CLI command to fetch the IP address of the EC2 instance
                    TEST_SERVER_IP = sh(script: "/usr/local/bin/aws ec2 describe-instances --instance-id i-0cd92fc368a5994a1 --query 'Reservations[0].Instances[0].PublicIpAddress' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    echo "EC2 instance IP: ${TEST_VM_IP}"
                }
            }
        }
        stage('Get EC2 Instance Prod IP') {
            steps {
                script {
                    echo "Fetching EC2 instance IP address"
                    // Run AWS CLI command to fetch the IP address of the EC2 instance
                    TEST_SERVER_IP = sh(script: "/usr/local/bin/aws ec2 describe-instances --instance-id i-0f7b247ad6431349d --query 'Reservations[0].Instances[0].PublicIpAddress' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    echo "EC2 instance IP: ${PROD_VM_IP}"
                }
            }
        }
        stage('Cleanup - cleaning the workspace') {
            steps {
                echo "Cleaning up the workspace on the Jenkins VM"
                deleteDir()
                echo "Cleaning up finished"
            }
        }
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from GitHub"
                git branch: 'main', url: 'https://github.com/TamirEilon/PortfolioWebsite.git'
                echo "Cloning from GitHub finished"
            }
        }
        stage('Install Docker') {
            steps {
                sh 'sudo curl -fsSL https://get.docker.com -o get-docker.sh'
                sh 'sudo chmod +x get-docker.sh'
                sh 'sudo usermod -aG docker $USER'
                sh 'sudo systemctl enable docker'
                sh 'sudo systemctl start docker'
            }
        }
        stage('Install Docker Compose') {
            steps {
                sh 'sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                sh 'sudo chmod +x /usr/local/bin/docker-compose'
                sh 'docker-compose --version'
            }
        }
        stage('granting Docker access to the Jenkins user') {
            steps {
                sh 'sudo usermod -a -G docker jenkins'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Build the Docker image with the version number & image name
                    sh "docker build -t ${IMAGE_NAME}:${VERSION} ."
        
                    // Tag the image as latest
                    sh "docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest"
        
                    // Authenticating and connecting with DockerHub
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Logging in to DockerHub
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                        // Push the image to DockerHub
                        sh "docker tag website $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                        sh "docker push $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                    }
                }
            }
        }
        stage('Deploy to Test VM') {
            steps {
                script {
                    // Connect to the test VM using SSH
                    sshagent(['SSH_project']) {
                        withCredentials([usernamePassword(credentialsId: 'SSH_project', usernameVariable: 'SSH_USERNAME', passwordVariable: 'SSH_PASSWORD')]) {
                            sh "ssh -o StrictHostKeyChecking=no -o BatchMode=yes ${TEST_INSTANCE_USER}@${TEST_VM_IP} \"docker pull $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${version}\""
                        }
                    }
                }
            }
        }
    }
}

        
