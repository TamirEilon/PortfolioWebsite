pipeline {
    agent any
    environment {
        BUILD_VM_IP = "18.234.66.185"
        TEST_VM_IP = "3.80.73.170"
        PROD_VM_IP = "3.95.157.132"
        DOCKERHUB_REPONAME = "new_website"
        IMAGE_NAME = "website"
        TEST_INSTANCE_USER = "ec2-user"
        KEY_PATH = "/Users/tamireilon/Downloads/FinalProjectKey.pem"
        AWS_REGION = "us-east-1"
        VERSION = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    }
    stages {
        stage('Cleanup - cleaning the workspace') {
            steps {
                echo "Cleaning up the workspace on the Jenkins VM"
                deleteDir()
                echo "Cleaning up finished"
            }
        }
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from GitHub"
                git branch: 'main', url: 'https://github.com/TamirEilon/PortfolioWebsite.git'
                echo "Cloning from GitHub finished"
            }
        }
        stage('Install Docker') {
            steps {
                sh 'sudo curl -fsSL https://get.docker.com -o get-docker.sh'
                sh 'sudo chmod +x get-docker.sh'
                sh 'sudo usermod -aG docker $USER'
                sh 'sudo systemctl enable docker'
                sh 'sudo systemctl start docker'
            }
        }
        stage('Install Docker Compose') {
            steps {
                sh 'sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                sh 'sudo chmod +x /usr/local/bin/docker-compose'
                sh 'docker-compose --version'
            }
        }
        stage('granting Docker access to the Jenkins user') {
            steps {
                sh 'sudo usermod -a -G docker jenkins'
            }
        }
        stage('Build and Push Docker Image') { // Build the Docker image with the version number & image name
            steps {
                script {
                    // The next few lines are mendatory in each VM we want to preform a build.
                    // It clears the VM (much like a cleanup), in order for us to use the same
                    // elements and names (for containers and images)

                    sh "docker rm --force \$(docker ps -aq)" 
                    sh "docker rmi --force \$(docker images -q)" // Deletes all images on the EC2 instance
                    sh "docker kill \$(docker ps -q) || true" // Kills all runing dockers on the EC2 instance, in order to use the 80 port again
                    sh "docker rm -f websitecontainer"
                    sh "docker build -t ${IMAGE_NAME}:${VERSION} ."
        
                    // Tag the image as latest
                    sh "docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest"
        
                    // Authenticating and connecting with DockerHub
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Logging in to DockerHub
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                        // Push the image to DockerHub
                        sh "docker tag website $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                        sh "docker push $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                        // Run the Docker container using the pushed image
                        sh "docker run -d -p 80:80 --name websitecontainer $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                    }
                }
            }
        }
        stage('Deploy to Test Server') {
            steps {
                script {
            def sshScript = '''
                sh "docker rm --force \$(docker ps -aq)" 
                sh "docker rmi --force \$(docker images -q)" // Deletes all images on the EC2 instance
                sh "docker kill \$(docker ps -q) || true" // Kills all runing dockers on the EC2 instance, in order to use the 80 port again
                sh "docker rm -f websitecontainer"
                sh "docker pull $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                sh "docker run -d -p 80:80 --name websitecontainer $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
            '''
            
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh_instrances', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sshagent(['ssh_instrances']) {
                                sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "${sshScript}"'
                                // sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker pull $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"'
                                // sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker run -d -p 80:80 --name websitecontainer $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"'
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy to Prod Server') {
            steps {
                script {
            def sshScript = '''
                sh "docker rm --force \$(docker ps -aq)" 
                sh "docker rmi --force \$(docker images -q)" // Deletes all images on the EC2 instance
                sh "docker kill \$(docker ps -q) || true" // Kills all runing dockers on the EC2 instance, in order to use the 80 port again
                sh "docker rm -f websitecontainer"
                sh "docker pull $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                sh "docker run -d -p 80:80 --name websitecontainer $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
            '''
            
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh_instrances', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sshagent(['ssh_instrances']) {
                                sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${PROD_VM_IP} "${sshScript}"'
                                // sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker pull $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"'
                                // sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker run -d -p 80:80 --name websitecontainer $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"'
                            }
                        }
                    }
                }
            }
        }
    }
}
        
