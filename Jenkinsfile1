pipeline {
    agent any
    environment {
        BUILD_VM_IP = "54.242.101.176"
        TEST_VM_IP = "54.89.189.35"
        PROD_VM_IP = "34.238.49.157"
        DOCKERHUB_REPONAME = "new_website"
        IMAGE_NAME = "website"
        TEST_INSTANCE_USER = "ec2-user"
        KEY_PATH = "/Users/tamireilon/Downloads/FinalProjectKey.pem"
        AWS_REGION = "us-east-1"
        VERSION = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    }
    stages {
        stage('Cleanup - cleaning the workspace') {
            steps {
                echo "Cleaning up the workspace on the Jenkins VM"
                deleteDir()
                echo "Cleaning up finished"
            }
        }
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from GitHub"
                git branch: 'main', url: 'https://github.com/TamirEilon/PortfolioWebsite.git'
                echo "Cloning from GitHub finished"
            }
        }
        stage('Install Docker') {
            steps {
                sh 'chmod +x docker_install.sh'
                sh './docker_install.sh'
            }
        }
        stage('Install Docker Compose') {
            steps {
                sh 'chmod +x docker_compose_install.sh'
                sh './docker_compose_install.sh'
            }
        }
        stage('granting Docker access to the Jenkins user') {
            steps {
                sh 'sudo usermod -a -G docker jenkins'
            }
        }
        stage('Build and Push Docker Image') { // Build the Docker image with the version number & image name
            steps {
                script {
                    // The next script is mendatory in each VM we want to preform a build.
                    // It clears the VM (much like a cleanup), in order for us to use the same
                    // elements and names (for containers and images)

                    sh 'chmod +x clear_vm.sh'
                    sh './clear_vm.sh'
        
                    // Tag the image as latest
                    sh "docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest"
        
                    // Authenticating and connecting with DockerHub
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Logging in to DockerHub
                        withEnv(['DOCKER_CLI_AIO=1']) {
                            sh """
                                docker login -u \$DOCKER_USERNAME -p \$DOCKER_PASSWORD
                                docker tag website \$DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}
                                docker push \$DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}
                                docker run -d -p 80:80 --name websitecontainer \$DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}
                            """
                        }
                    }
                }
            }
        }
        stage('Deploy to Test Server') {
            steps {
                script {
                    def sshScript = readFile('clear_vm.sh')  // Read the script from the file
                    
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh_instrances', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sshagent(['ssh_instrances']) {
                                sh """
                                    ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} <<'ENDSSH'
                                    $sshScript
                                    ENDSSH
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Curl Docker Website - Test') {
            steps {
                script {                    
                    // Make the curl request
                    sh "curl http://${TEST_VM_IP}"
                }
            }
        }
        stage('Deploy to Prod Server') {
            steps {
                script {
                def sshScript = '''
                        sh "docker rm --force \$(docker ps -aq)" 
                        sh "docker rmi --force \$(docker images -q)" // Deletes all images on the EC2 instance
                        sh "docker kill \$(docker ps -q) || true" // Kills all runing dockers on the EC2 instance, in order to use the 80 port again
                        sh "docker rm -f websitecontainer"
                        sh "docker pull $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                        sh "docker run -d -p 80:80 --name websitecontainer $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                    '''
            
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh_instrances', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sshagent(['ssh_instrances']) {
                                sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${PROD_VM_IP} "${sshScript}"'
                            }
                        }
                    }
                }
            }
        }
        stage('Curl Docker Website - Prod') {
            steps {
                script {                    
                    // Make the curl request
                    sh "curl http://${PROD_VM_IP}"
                }
            }
        }
    }
}
        
