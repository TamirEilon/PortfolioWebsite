pipeline {
    agent any
    environment {
        IMAGE_NAME = "website"
        TEST_INSTANCE_USER = "ec2-user"
        KEY_PATH = "/Users/tamireilon/Downloads/FinalProjectKey.pem"
        AWS_REGION = "us-east-1"
    }
    stages {
        stage('Cleanup - cleaning the workspace') {
            steps {
                echo "Cleaning up the workspace on the jenkins VM"
                deleteDir()
                echo "cleaning up finished"
            }
        }
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from GitHub"
                git branch: 'main', url: 'https://github.com/TamirEilon/PortfolioWebsite.git'
                echo "cloning from GitHub finished"
            }
        }
        stage('Install Docker') {
            steps {
                sh 'curl -fsSL https://get.docker.com -o get-docker.sh'
                sh 'sudo sh get-docker.sh'
                sh 'sudo usermod -aG docker $USER'
                sh 'sudo systemctl enable docker'
                sh 'sudo systemctl start docker'
            }
        }

        stage('Install Docker Compose') {
            steps {
                sh 'sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                sh 'sudo chmod +x /usr/local/bin/docker-compose'
                sh 'docker-compose --version'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Generate the version number based on the Git commit hash
                    def version = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()

                    // Build the Docker image with the version number & imgae name
                    sh "docker build -t ${IMAGE_NAME}:${version} ."

                    // Tag the image as latest
                    sh "docker tag ${IMAGE_NAME}:${version} ${IMAGE_NAME}:latest"

                    // Authenticating and connecting with DockerHub
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Logging in to DockerHub
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'

                        // Push the image to DockerHub
                        sh "docker push ${IMAGE_NAME}:${version}"
                        sh 'docker push ${IMAGE_NAME}:latest'
                    }
                }
            }
            stage('Deploy to Test VM') {
                steps {
                    script {
                        // Connect to the test VM using SSH
                        sshagent(['SSH_project']) {
                            sh 'ssh -o StrictHostKeyChecking=no ${TEST_INSTANCE_USER}@<test-vm-ip> "docker pull your-dockerhub-username/your-repository:${version}"'
                        }
                    }
                }
            }




        stage('Upload to Build VM') {
            steps {
                script {
                    echo "Setting ownership and permissions"
                    sh "ssh -i ${KEY_PATH} -o StrictHostKeyChecking=no ${TEST_INSTANCE_USER}@${TEST_SERVER_IP} 'sudo chown -R ${TEST_INSTANCE_USER}:${TEST_INSTANCE_USER} /var/www/html'"
                    sh "ssh -i ${KEY_PATH} -o StrictHostKeyChecking=no ${TEST_INSTANCE_USER}@${TEST_SERVER_IP} 'sudo chmod -R 755 /var/www/html'"
                    echo "Setting ownership and permissions completed"
                    
                    echo "Clearing /var/www/html folder"
                    sh "ssh -i ${KEY_PATH} -o StrictHostKeyChecking=no ${TEST_INSTANCE_USER}@${TEST_SERVER_IP} 'sudo rm -rf /var/www/html/*'"
                    echo "Clearing /var/www/html folder completed"

                    echo "Copying zip file to EC2 instance"
                    sh "scp -i ${KEY_PATH} -o StrictHostKeyChecking=no PortfolioWebsite.zip ${TEST_INSTANCE_USER}@${TEST_SERVER_IP}:/var/www/html"
                    echo "Copying zip file completed"

                    echo "Unzipping files on EC2 instance"
                    sh "ssh -i ${KEY_PATH} -o StrictHostKeyChecking=no ${TEST_INSTANCE_USER}@${TEST_SERVER_IP} 'sudo unzip -o /var/www/html/PortfolioWebsite.zip -d /var/www/html'"
                    echo "Unzipping files on EC2 instance completed"
                    
                    echo "Cleaning up zip file on EC2 instance"
                    sh "ssh -i ${KEY_PATH} -o StrictHostKeyChecking=no ${TEST_INSTANCE_USER}@${TEST_SERVER_IP} 'rm /var/www/html/PortfolioWebsite.zip'"
                }
            }
         }
        stage('Curl Test') {
            steps {
                script {
                    echo "Running curl test"
                    sh "curl ${TEST_SERVER_IP}"
                    // Add any assertions or validations based on the curl response
                }
            }
        }
    }
}
