pipeline {
    agent any
    environment {
        BUILD_VM_IP = "34.228.21.92"
        TEST_VM_IP = "54.152.22.175"
        PROD_VM_IP = "34.238.49.157"
        DOCKERHUB_REPONAME = "new_website"
        IMAGE_NAME = "website"
        TEST_INSTANCE_USER = "ec2-user"
        KEY_PATH = "/Users/tamireilon/Downloads/FinalProjectKey.pem"
        AWS_REGION = "us-east-1"
    }
    parameters {
        string(name: 'IMAGE_VERSION', defaultValue: '1.0', description: 'Specify the image version')
    }
    
    stages {
        stage('Cleanup - cleaning the workspace') {
            steps {
                echo "Cleaning up the workspace on the Jenkins VM"
                deleteDir()
                echo "Cleaning up finished"
            }
        }
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from GitHub"
                git branch: 'main', url: 'https://github.com/TamirEilon/PortfolioWebsite.git'
                echo "Cloning from GitHub finished"
            }
        }
        stage('Install Docker') {
            steps {
                sh 'chmod +x docker_install.sh'
                sh './docker_install.sh'
            }
        }
        stage('Install Docker Compose') {
            steps {
                sh 'chmod +x docker_compose_install.sh'
                sh './docker_compose_install.sh'
            }
        }
        stage('granting Docker access to the Jenkins user') {
            steps {
                sh 'sudo usermod -a -G docker jenkins'
            }
        }
        stage('Stopping all containers on Build VM') {
            steps {
                script {
                    def runningContainers = sh(
                        script: "docker ps --format '{{.Names}}'",
                        returnStdout: true
                    ).trim()
        
                    if (runningContainers) {
                        sh 'docker stop $(docker ps -a -q)'
                    } else {
                        echo 'No running containers found.'
                    }
                }
            }
        }
        stage('Deleting all containers on Build VM') {
            steps {
                script {
                    def stoppedContainers = sh(
                        script: "docker ps -a --filter 'status=exited' --format '{{.Names}}'",
                        returnStdout: true
                    ).trim()
        
                    if (stoppedContainers) {
                        sh 'docker rm $(docker ps -a -q)'
                    } else {
                        echo 'No stopped containers found.'
                    }
                }
            }
        }
        stage('deleting all images on Build VM') {
            steps {
                script {
                    sh 'docker image prune -a --force'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Increment the image version by 0.1
                    def newVersion = (params.IMAGE_VERSION as Double) + 0.1
                    // Convert the new version back to a string with one decimal place
                    def newVersionString = String.format('%.1f', newVersion)
                    
                    // Build the image with the updated version
                    sh "docker build -t ${IMAGE_NAME}:${newVersionString} ."
                    
                    // Pass the new version to the next stages
                    env.VERSION = newVersionString
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                        sh "docker push $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${env.VERSION}"
                        sh "docker run -d -p 80:80 $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${env.VERSION}"
                    }
                }
            }
        }
        stage ('clearing the Test VM') {
            steps {
                script {
                    // The next script is mendatory in each VM we want to preform a build.
                    // It clears the VM (much like a cleanup), in order for us to use the same
                    // elements and names (for containers and images)
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh_instrances', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker rmi --force $(docker images -a -q)"' //clearing all images
                        sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker rm --force $(docker ps -a -f status=exited -q)"' // clearing all containers
                    }
                }
            }
        }
        stage('Pulling image to Test Server') {
            steps {
                script {
            def sshScript = '''
                sh "docker rm --force \$(docker ps -aq)" 
                sh "docker rmi --force \$(docker images -q)" // Deletes all images on the EC2 instance
                sh "docker kill \$(docker ps -q) || true" // Kills all runing dockers on the EC2 instance, in order to use the 80 port again
                sh "docker rm -f websitecontainer"
                sh "docker pull $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
                sh "docker run -d -p 80:80 --name websitecontainer $DOCKER_USERNAME/${DOCKERHUB_REPONAME}:${VERSION}"
            '''
            
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh_instrances', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        withCredentials([usernamePassword(credentialsId: 'docker_hub_creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sshagent(['ssh_instrances']) {
                                sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker rmi --force $(docker images -a -q)"'
                                sh 'ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${TEST_INSTANCE_USER}@${TEST_VM_IP} "docker rm --force $(docker ps -a -f status=exited -q)"'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
