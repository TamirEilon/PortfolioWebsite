hopipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('DockerHubCredentials') // Add your Docker Hub credentials ID here
        GIT_REPO_URL = 'https://github.com/TamirEilon/PortfolioWebsite.git' // Replace with your Git repo URL
        DOCKER_IMAGE_NAME = 'tamireilon/new_website' // Replace with your Docker Hub username and image name
        DOCKER_IMAGE_TAG = 'latest'
        TEST_VM_IP = '34.165.15.168' // Replace with the IP of your test VM
        SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa' // Replace with the path to your Jenkins SSH private key
    }

    stages {
        stage('Clear Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Clone Git Repo') {
            steps {
                git branch: 'master', url: "${GIT_REPO_URL}"
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_HUB_CREDENTIALS) {
                        def customImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", '.')
                        customImage.push()
                    }
                }
            }
        }

        stage('SSH to Test VM and Run Image') {
            steps {
                script {
                    sshCommand remote: "tamireilon@${TEST_VM_IP}", user: 'jenkins', identityFile: "${SSH_KEY_PATH}", command: "docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} && docker run -d -p 80:80 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Wait for Application Startup') {
            steps {
                sleep time: 30, unit: 'SECONDS' // Adjust the sleep time based on your application startup time
            }
        }

        stage('Curl the Website') {
            steps {
                script {
                    def curlResult = sh(returnStdout: true, script: "curl -s -o /dev/null -w \"%{http_code}\" http://${TEST_VM_IP}")
                    echo "Website returned HTTP status: ${curlResult}"
                }
            }
        }

        stage('Connect to Cluster and Deploy') {
            steps {
                echo "Replace the below steps with your specific commands to connect and deploy to your cluster"
                // Example:
                // sshCommand remote: "your_cluster_username@your_cluster_ip", user: 'jenkins', identityFile: "${SSH_KEY_PATH}", command: "kubectl apply -f your_deployment_yaml_file.yaml"
            }
        }
    }
}
