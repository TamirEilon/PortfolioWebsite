name: Build, Push, Run, Check, and Deployy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Get Last Version
      id: get_last_version
      run: |
        last_version=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/portfolio-website/tags/?page_size=10" | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
        echo "::set-output name=last_version::$last_version"
        
      # These lines find the list of all the versions available in my DockerHub repo
      # and retrieve the last version (the variable is "last_version").
      
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

    - name: Determine Version Bump
      id: determine_version_bump
      run: |
        commit_message=$(git log -1 --pretty=%B)
        if echo "$commit_message" | grep -qiE 'major'; then
          echo "::set-output name=bump_type::major"
        elif echo "$commit_message" | grep -qiE 'minor'; then
          echo "::set-output name=bump_type::minor"
        else
          echo "::set-output name=bump_type::patch"
        fi

      # These lines retrieve the commit message and check for any key
      # word such as patch, minor, or major. According to the keyword found
      # in the message, it will set the variable "bump_type"

    - name: Bump Version
      id: bump_version
      run: |
        current_version="${{ steps.get_last_version.outputs.last_version }}"
        # This line gets the variable from earlier "last_version" and sets it as "current_version"
        
        bump_type="${{ steps.determine_version_bump.outputs.bump_type }}"
        # This line gets the variable from earlier "bump_type" and sets it as "bump type"

        IFS='.' read -r -a version_parts <<< "$current_version"
        # This section takes the variable "current_version" and splits it into an array
        # so it can change each number specifically
        
        case "$bump_type" in
          major) new_version="$((version_parts[0] + 1)).0.0" ;;
          minor) new_version="${version_parts[0]}.$((version_parts[1] + 1)).0" ;;
          *) new_version="${version_parts[0]}.${version_parts[1]}.$((version_parts[2] + 1))" ;;
        esac
        echo "::set-output name=new_version::$new_version"

      # These lines check the version variable and bump it up accordingly 


    - name: Build Docker Image
      run: |
        new_version="${{ steps.bump_version.outputs.new_version }}"
        docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-website:$new_version .
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 
    
    - name: Push Docker Image
      run: |
        new_version="${{ steps.bump_version.outputs.new_version }}"
        docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-website:$new_version 
        docker tag ${{ secrets.DOCKER_USERNAME }}/portfolio-website:$new_version ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
        
  run-and-check:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Pull Docker Image
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
        docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
        
    - name: Check if Container is Running
      run: |
        while true; do
          if curl -s http://localhost:80; then
            echo "Container is up and running."
            break
          else
            echo "Waiting for the container to start..."
            sleep 5
          fi
        done

  deploy_to_gke:      
    needs: run-and-check
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: myfinalproject2-395806
          export_default_credentials: true

      - name: install plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Pull image from DockerHub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest

      - name: Set kubectl context to GKE
        run: gcloud container clusters get-credentials my-cluster --region me-west1

      - name: Apply Kubernetes manifests
        run: kubectl apply -f deployment.yml
  
      - name: Trigger GKE rollout
        run: kubectl rollout restart deployment my-deployment

  deploy_monitoring:
    needs: deploy_to_gke
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: myfinalproject2-395806
          export_default_credentials: true

      - name: install plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Deploy Prometheus and Grafana
        run: |
          gcloud container clusters get-credentials my-cluster --region me-west1
          kubectl apply -f prometheus.yml
          kubectl apply -f grafana.yml

      - name: Expose Grafana Service
        run: kubectl expose deployment grafana --type=LoadBalancer --port=3000
