name: Build, Push, Run, Check, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest .
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
  run-and-check:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Pull Docker Image
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
        docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
        
    - name: Check if Container is Running
      run: |
        while true; do
          if curl -s http://localhost:80; then
            echo "Container is up and running."
            break
          else
            echo "Waiting for the container to start..."
            sleep 5
          fi
        done

  deploy_to_gke:      
    needs: run-and-check
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: myfinalproject2-395806
          export_default_credentials: true
  
      - name: Configure Docker credentials
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
  
      - name: Pull image from DockerHub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
  
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials my-cluster --zone me-west1
  
      - name: Deploy to GKE
        run: |
          kubectl create deployment my-app --image=${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest
          kubectl expose deployment my-app --type=LoadBalancer --port=80 --target-port=80
